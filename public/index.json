[
{
	"uri": "/1-introduce/1.1-amazon-eks/",
	"title": "Amazon EKS",
	"tags": [],
	"description": "",
	"content": "Amazon Elastic Kubernetes Service (EKS) Amazon Elastic Kubernetes Service (EKS) là một dịch vụ cho phép người dùng vận hành Kubernetes trên AWS một cách dễ dàng. Nó cung cấp các tính năng như tự động triển khai, quản lý, và mở rộng các ứng dụng container sử dụng Kubernetes. Ngoài ra EKS còn được kết nối với các dịch vụ khác như CloudWatch, Auto Scaling Group, Load Balancer, IAM, VPC, và các dịch vụ khác của AWS.\nCác tính năng chính của EKS Secure networking and authentication EKS khởi chạy cluster của bạn trong AWS networking và sử dụng IAM để xác thực và quản lý quyền truy cập vào cluster của bạn. Việc này sẽ tăng tính bảo mật cho các workload của bạn khi chạy trên EKS.\nHighly available and scalable EKS sử dụng các master node được triển khai trên nhiều Availability Zone (AZ) để đảm bảo tính sẵn sàng cao và khả năng mở rộng. Ngoài ra, EKS còn hỗ trợ các tính năng như Auto Scaling Group, Elastic Load Balancing, và Elastic Block Store để đảm bảo tính sẵn sàng và khả năng mở rộng cho các ứng dụng của bạn.\nManaged Kubernetes experience Bạn có thể quản lý cluster của mình bằng nhiều công cụ khác nhau như eksctl, AWS management console, AWS CLI, và các công cụ khác. Ngoài ra, bạn cũng có thể sử dụng các công cụ quản lý Kubernetes như kubectl để quản lý cluster của mình. Trong bài lab này mình sẽ sử dụng eksctl và kubectl để quản lý cluster.\n"
},
{
	"uri": "/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tìm hiểu lý thuyết cơ bản về Kubernetes, Amazon EKS và Amazon Fargate.\nNội dung Amazon EKS Amazon Fargate Kubernetes cơ bản "
},
{
	"uri": "/3-eks-fargate/3.1-create-cluster/",
	"title": "Khởi tạo Cluster",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tiến hành tạo cluster với fargate mode, cài đặt AWS Load Balancer Controller vào cluster của chúng ta\nNội dụng Khởi tạo Cluster với Fargate Cài đặt AWS Load Balancer Controller "
},
{
	"uri": "/3-eks-fargate/3.1-create-cluster/3.1.1-create-cluster/",
	"title": "Khởi tạo Cluster với Fargate ",
	"tags": [],
	"description": "",
	"content": "Trong phần này mình sẽ tạo cluster trên AWS EKS bằng eksctl, một công cụ được tạo ra bởi weaveworks để giúp chúng ta tạo cluster trên eks một cách dễ dàng hơn. Đây là templete khởi tạo cluster của chúng ta:\napiVersion: eksctl.io/v1alpha5 kind: ClusterConfig metadata: name: fargate-cluster region: ap-northeast-1 fargateProfiles: - name: fp-default selectors: - namespace: default - namespace: kube-system - name: fp-dev selectors: - namespace: app-dev labels: fargate: \u0026#39;yes\u0026#39; File configure trên sẽ tạo ra 2 Fargate Profile:\nMột cho namespace default và kube-system và một cho namespace app-dev. Các Objects mặc định của Kubernetes sẽ được chạy trong 2 name space trên. Profile còn lại sẽ tạo ra namespace app-dev, những Pods trong namespace này có label fargate=yes sẽ được chạy trên Fargate. Thực hiện command sau đây để tiến hành tạo cluster với fargate mode:\neksctl create cluster -f cluster-fargate.yaml Bạn có thể thay đổi tên của cluster bằng cách thay đổi giá trị của metadata.name trong file cluster-fargate.yaml. Bạn cần chờ tầm 15 phút để cluster được tạo xong.\nHãy xem lại thông tin Profile Fargate đã được tạo\naws eks describe-fargate-profile \\\r--cluster-name fargate-cluster \\\r--fargate-profile-name fp-dev Dưới đây là ví dụ về một Fargate Profile được tạo ra:\n{\r\u0026#34;fargateProfile\u0026#34;: {\r\u0026#34;fargateProfileName\u0026#34;: \u0026#34;fp-dev\u0026#34;,\r\u0026#34;fargateProfileArn\u0026#34;: \u0026#34;arn:aws:eks:ap-southeast-1:708218810093:fargateprofile/fargate-cluster/fp-dev/9ec54cc9-af60-1cf0-fd21-86ebfc54596f\u0026#34;,\r\u0026#34;clusterName\u0026#34;: \u0026#34;fargate-cluster\u0026#34;,\r\u0026#34;createdAt\u0026#34;: \u0026#34;2023-09-15T16:01:29.537000+00:00\u0026#34;,\r\u0026#34;podExecutionRoleArn\u0026#34;: \u0026#34;arn:aws:iam::708218810093:role/eksctl-fargate-cluster-clu-FargatePodExecutionRole-18IHJGASIOB24\u0026#34;,\r\u0026#34;subnets\u0026#34;: [\r\u0026#34;subnet-08a83dabf207d2fac\u0026#34;,\r\u0026#34;subnet-06c074e2e6bead05e\u0026#34;,\r\u0026#34;subnet-087aa09ccfd79c18b\u0026#34;\r],\r\u0026#34;selectors\u0026#34;: [\r{\r\u0026#34;namespace\u0026#34;: \u0026#34;app-dev\u0026#34;,\r\u0026#34;labels\u0026#34;: {\r\u0026#34;fargate\u0026#34;: \u0026#34;yes\u0026#34;\r}\r}\r],\r\u0026#34;status\u0026#34;: \u0026#34;ACTIVE\u0026#34;,\r\u0026#34;tags\u0026#34;: {}\r}\r} Bạn đã hoàn thành tào một cluster trên EKS bước tiếp theo chúng ta sẽ cài đặt AWS Load Balancer Controller để có thể sử dụng được Load Balancer trên Fargate.\n"
},
{
	"uri": "/1-introduce/1.3-kubernetes-basic/1.3.1-architecture-basics/",
	"title": "Kiến trúc cơ bản của Kubernetes",
	"tags": [],
	"description": "",
	"content": " Một cụm cluster sẽ gồm nhiều máy chạy với nhau gọi là node. để quản lý các node trong cũng như việc giao tiếp giữa các node với nhau, Kubernetes sử dụng Control Plane được đặt tại Master Node. Những node còn lại được dùng để chạy các workloads gọi là Worker node.\nControl Plane Là phần đầu của Kubernetes, nơi chứa các thành phần quản lý và điều khiển các node trong cluster. Control Plane bao gồm các thành phần sau:\nAPI Server Là thành phần chịu trách nhiệm cung cấp API cho các thành phần khác trong Control Plane. API Server cũng là thành phần duy nhất trong Control Plane có thể truy cập từ bên ngoài cluster. Dùng để tương tác với cluster thông qua API\nScheduler Là thành phần chịu trách nhiệm lên lịch chạy các Pod trên các node trong cluster. Scheduler sẽ chọn ra node phù hợp để chạy Pod dựa trên các yêu cầu của Pod đó.\nController Manager Là thành phần chịu trách nhiệm quản lý các controller trong cluster. Có rất nhiều thành phần cần được quản lý trong Cluster controllers sinh ra để làm việc đó. Các bạn có thể tìm hiểu thêm về Controller tại đây. Nói đơn giản, Controller Manager là tổng hợp các controller trong cluster lại.\netcd Là thành phần chịu trách nhiệm lưu trữ dữ liệu của cluster. etcd là một key-value store được sử dụng để lưu trữ thông tin cấu hình của cluster. Các thành phần trong Control Plane sẽ lưu trữ thông tin của chúng vào etcd. Các thành phần khác trong cluster sẽ lấy thông tin từ etcd để thực hiện các tác vụ của mình.\nWorker Nodes Là nơi chạy các workloads của cluster. Mỗi node sẽ chạy một hoặc nhiều Pod. Worker Nodes bao gồm các thành phần sau:\nKubelet Là thành phần chịu trách nhiệm quản lý các Pod trên node. Kubelet sẽ nhận các yêu cầu từ API Server và thực hiện các tác vụ đó trên node. Kubelet cũng sẽ gửi các thông tin về trạng thái của node lên API Server để các thành phần khác trong Control Plane có thể lấy thông tin đó.\nKube-proxy Là thành phần chịu trách nhiệm quản lý mạng trên node. Kube-proxy sẽ tạo ra các rule để các Pod có thể giao tiếp với nhau. Kube-proxy cũng sẽ tạo ra các rule để các Pod có thể giao tiếp với bên ngoài cluster.\nContainer Runtime Là thành phần chịu trách nhiệm quản lý các container trên node. Container Runtime sẽ tạo ra các container dựa trên các yêu cầu từ Kubelet. Container Runtime cũng sẽ gửi các thông tin về trạng thái của các container lên Kubelet để các thành phần khác trong Control Plane có thể lấy thông tin đó.\nKubectl Là công cụ dùng để tương tác với cluster thông qua API Server. Kubectl sẽ gửi các yêu cầu của người dùng lên API Server và nhận các kết quả trả về từ API Server. Kubectl cũng sẽ gửi các yêu cầu của người dùng lên API Server và nhận các kết quả trả về từ API Server. Tìm hiểu thêm về Kubectl tại đây.\n"
},
{
	"uri": "/",
	"title": "Start EKS with fargate mode",
	"tags": [],
	"description": "",
	"content": "Bắt đầu với EKS và Fargate mode Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về ECS - ECR. Thực hành tạo các services chạy task trong các private subnets và gắn load balancing cho ECS.\nNội dung Giới thiệu Các bước chuẩn bị EKS với Fargate Dọn dẹp tài nguyên Fargate không nằm trong free tier của AWS. Bạn sẽ phải trả phí cho các tài nguyên sử dụng trong bài lab này. Bạn có thể tìm hiểu thêm về giá cả của Fargate tại đây.\n"
},
{
	"uri": "/2-prerequiste/2.1-create-cloud9-ide/",
	"title": "Tạo Cloud9 IDE bằng CloudFormation",
	"tags": [],
	"description": "",
	"content": "Ở phần này chúng ta sẽ tạo một Cloud9 IDE thông qua CloudFormation.\nTruy cập đến CloudFormation Management Console bằng cách gõ CloudFormation vào thanh tìm kiếm sau đó nhấn chọn Create Stack để tiến hành tạo stack Trong phần Create Stack\nChọn Upload a template file Upload templete lại đường link sau đây Nhấn chọn Next để tiếp tục Ở phần Specify stack details\nĐiền tên của stack vào Stack name, ví dụ Cloud9 Stack Nhấn chọn Next để tiếp tục Ở phần Configure stack details\nĐể mọi thứ mặc định và nhấn Next để tiếp tục Ở phần Review Stack\nTích chọn mục I acknowledge that AWS CloudFormation might create IAM resources. để xác nhận việc stack sẽ được phép tạo iam role và gắn vào instance của cloud9. Điều này cho phép cloud9 có quyền thao tác với aws của bạn Nhấn Submit để tiến hành tạo Stack Bạn cần chờ một khoản thời gian tầm 5 phút để CloudFormation tạo xong stack. Bạn có thể theo dõi quá trình tạo stack bằng cách chọn stack vừa tạo và chọn tab Events.\nKhi quá trình tạo stack hoàn tất, truy cập vào tab Outputs để lấy đường link của Cloud9 IDE. Sau khi truy cập được vào Cloud9 IDE, bạn sẽ thấy một màn hình như sau: Trước tiên hãy clone source mình đã chuẩn bị sẳn bằng command sau đây\ngit clone https://github.com/huy1010/sources.git Tiếp theo hãy cài đặc các package cần thiết cho bài lab bằng command sau đây\ncd sources sudo bash installer.sh Đây là kết quả mình nhận được\n"
},
{
	"uri": "/1-introduce/1.2-amazon-fargate/",
	"title": "Amazon Fargate",
	"tags": [],
	"description": "",
	"content": "Amazon Fargate Amazon Fargate, là một dịch vụ container serverless. Khi khởi chạy các container của bạn trên EKS với fargate bạn sẽ không cần quan tâm về việc cấp phát, quản lý, mở rộng các cụm EC2. Bạn chỉ cần tập trung vào việc triển khai các ứng dụng của mình. Fargate sẽ giúp bạn quản lý các tài nguyên cần thiết để chạy các ứng dụng của bạn. Ngoài ra, bạn cũng có thể sử dụng Fargate để chạy các ứng dụng container trên ECS.\nBạn có thể kiểm soát Pod khởi chạy trên Fargate và cách chúng chạy. Amazon EKS tích hợp Kubernetes với Fargate bằng cách sử dụng controllers do AWS xây dựng. Các controllers này chạy như một phần control plane của Kubernetes do Amazon EKS quản lý và chịu trách nhiệm lên lịch cho các Kubernetes Pod trên Fargate. Khi bạn khởi chạy một Pod đáp ứng các tiêu chí để chạy trên Fargate, Controller Fargate đang chạy trong cluster sẽ nhận dạng, cập nhật và lên lịch Pod chạy trên Fargate mode.\nFargate profile Trước khi khởi chạy bất kì Pod nào trên Fargate bận cần phải define Fargate profile trên cluster. Các thành phần của Fargate profile bao gồm:\nSelectors: Các selectors được sử dụng để xác định các Pod nào sẽ được khởi chạy trên Fargate. Các selectors này có thể là namespace, label, hoặc annotation của Pod. Subnets: Các subnets được sử dụng để khởi chạy các Pod trên Fargate. Các subnets này phải là private subnets. Pod execution role: Các Pod sẽ được khởi chạy trên Fargate sẽ được gán một IAM role. Role này sẽ được sử dụng để ghi log, truy cập vào các service khác như ECR, S3, và các service khác của AWS. Các điểm đặc biệt cần biết khi chạy Kubernetes trên Fargate Mỗi Pod chạy trên Fargate sẽ có một địa chỉ IP riêng biệt. các Pod sẽ không chia sẽ CPU, Memory, địa chỉ IP với các Pod khác. Các pod bắt buộc phải match với Fargate profile lúc chúng được lên lịch khởi chạy. Những Pod không match với Farmgate profile sẽ không được khởi chạy và sẽ ở trạng thái Pending. Pods chạy trên Fargate chỉ support cho các private subnets. Nên VPC chứa cluster cần phải có ít nhất 1 private subnet. Trên đây chỉ là các lưu ý cơ bản khi khởi chạy Fargate mode. Bạn có thể tìm hiểu thêm về Fargate mode tại đây.\n"
},
{
	"uri": "/2-prerequiste/2.2-attach-iam-role/",
	"title": "Attach IAM Role vào Cloud9 Instance",
	"tags": [],
	"description": "",
	"content": "Ở bước này chúng ta sẽ gắn roles vào cho EC2 intances đang chạy cloud9 để có quyền tương tác với aws. Bắt đầu theo các bước sau đây:\nTrước tiên truy cập vào EC2 bằng cách nhấn vào Manage EC2 Instance Tích chọn EC2 instance đang chạy cloud9 và chọn Actions -\u0026gt; Sercurity -\u0026gt; Modify IAM Role Chọn Cloud9-MyCloud9InstanceProfile và nhấn Update IAM Role để lưu lại Trở về Cloud9 IDE và chọn chạy command sau update lại policy cho Cloud9 sudo bash update_policy.sh Chạy command sau để xác thực lại việc attach IAM role vào Cloud9 aws sts get-caller-identity --query Arn | grep MyCloud9Role -q \u0026amp;\u0026amp; echo \u0026#34;IAM role valid\u0026#34; || echo \u0026#34;IAM role not valid\u0026#34; Nếu kết quả trả về là IAM role valid thì bạn đã hoàn thành bước này "
},
{
	"uri": "/1-introduce/1.3-kubernetes-basic/1.3.2-fundamental-components/",
	"title": "Các đối tượng cơ bản trong Kubernetes",
	"tags": [],
	"description": "",
	"content": "Kubernetes Objects cơ bản Trong phạm vi bài lab, mình sẽ chỉ giới thiệu tới các objects cơ bản nhất được sử dụng trong lab. Các bạn có thể tìm hiểu thêm về các objects khác tại đây.\nPods Khi một ứng dụng được đóng gói thì ứng dụng đó sẽ có thể chạy trên một container độc lập, tuy chúng ta có thể chạy container độc lập như cách khởi chạy một ứng dụng monolythic, nhưng Kubernetes sẽ không chạy theo cách như vậy, Kubernetes sử dụng khái niệm pod để nhóm các container lại với nhau. Một pod là một nhóm các container, các container này sẽ dùng chung tài nguyên và network, các container trong một pod có thể duy trì giao tiếp với nhau như trên một máy chủ nhưng vẫn giữ được sự độc lập cần thiết.\nDeployments Trong Kubernetes, đối tượng Deployment là đối tượng chính đảm nhận việc deploy và quản lý ứng dụng của chúng ta. Nó cho phép chúng ta deploy các Pod, update Pod, rollback Pod\nNamespaces Namespace là một thành phần logic được Kubernetes sử dụng để xác định phạm vi quản lý các resource. Mặc định, Kubernetes sẽ tạo ra một namespace có tên là default, tất cả các resource được tạo ra mà không chỉ định namespace sẽ được tạo ra trong namespace default. Các bạn có thể tạo ra các namespace khác để phân chia các resource trong cluster.\nServices Kubernetes service là một tài nguyên xác định ra một pod hoặc một nhóm các pod cung cấp cùng một dịch vụ và chính sách truy cập đến các pod đó. Đối với service, Kubernetes cũng cung cấp cho chúng ta nhiều kiểu service khác nhau để phù hợp với nhiều yêu cầu khác nhau.\n"
},
{
	"uri": "/3-eks-fargate/3.1-create-cluster/3.1.2-install-aws-load-balancer-controller/",
	"title": "Cài đặt AWS Load Balancer Controller",
	"tags": [],
	"description": "",
	"content": "Để cài đặt AWS Load Balancer Controller, chúng ta tiến hành các bước sau đây:\nCho phép cluster sử dụng dịch vụ AWS Identity and Access Management (IAM) để quản lý các tài nguyên AWS. eksctl utils associate-iam-oidc-provider --cluster \u0026lt;YOUR_CLUSTER_NAME\u0026gt; --approve Tạo IAM Policy cho AWS Load Balancer Controller aws iam create-policy \\\r--policy-name AWSLoadBalancerControllerIAMPolicy \\\r--policy-document file://iam_policy.json Tạo IAM Service account cho AWS Load Balancer Controller, thay thế \u0026lt;YOUR_CLUSTER_NAME\u0026gt; và \u0026lt;AWS_ACCOUNT_ID\u0026gt; trong command dưới đây và chạy nó để tạo service account. eksctl create iamserviceaccount \\\r--cluster=\u0026lt;YOUR_CLUSTER_NAME\u0026gt; \\\r--namespace=kube-system \\\r--name=aws-load-balancer-controller \\\r--attach-policy-arn=arn:aws:iam::\u0026lt;AWS_ACCOUNT_ID\u0026gt;:policy/AWSLoadBalancerControllerIAMPolicy \\\r--override-existing-serviceaccounts \\\r--approve kiểm tra lại service account đã được tạo bằng command sau đây kubectl get serviceaccount aws-load-balancer-controller --namespace kube-system Cài đặt AWS Load Balancer Controller helm repo add eks https://aws.github.io/eks-charts\rkubectl apply -k https://raw.githubusercontent.com/aws/eks-charts/master/stable/aws-load-balancer-controller/crds/crds.yaml Thay thế các giá trị \u0026lt;YOUR_CLUSTER_NAME\u0026gt;, \u0026lt;YOUR_REGION_CODE\u0026gt;, \u0026lt;VPC_ID\u0026gt; trong command dưới đây và chạy nó để cài đặt AWS Load Balancer Controller. VPC_ID là ID của VPC mà cluster của bạn đang sử dụng. helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\\r--set clusterName=\u0026lt;YOUR_CLUSTER_NAME\u0026gt; \\\r--set serviceAccount.create=false \\\r--set region=\u0026lt;YOUR_REGION_CODE\u0026gt; \\\r--set vpcId=\u0026lt;VPC_ID\u0026gt; \\\r--set serviceAccount.name=aws-load-balancer-controller \\\r-n kube-system Chúng ta vừa hoàn thành việc cài đặt AWS Load Balancer Controller trên cluster. Giúp liên kiết dịch vụ ELB của aws với cluster của chúng ta. Bạn có thể đọc thêm về AWS Load Balancer Controller tại đây.\n"
},
{
	"uri": "/2-prerequiste/",
	"title": "Chuẩn bị môi trường",
	"tags": [],
	"description": "",
	"content": "Ở phần này chúng ta sẽ tạo một Cloud9 IDE thông qua CloudFormation. Cloud9 IDE sẽ được grant các permission để thao tác với aws.\nNội dung Tạo Cloud9 IDE bằng CloudFormation Gắn IAM role cho CLoud9 Instance "
},
{
	"uri": "/3-eks-fargate/3.2-deploy-in-fargate/",
	"title": "Deploy ứng dụng trong Fargate",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo 2 object là Deployment và Service để deploy ứng dụng trong Fargate. Deployment sẽ tạo ra 1 Pod chạy ứng dụng. Service sẽ tạo ra một AWS Load Balancer để truy cập vào ứng dụng.\nĐây là file configure cho Deployment và Service:\n### Deployment apiVersion: apps/v1 kind: Deployment metadata: name: guestbook-ui namespace: app-dev spec: replicas: 1 revisionHistoryLimit: 3 selector: matchLabels: app: guestbook-ui template: metadata: labels: app: guestbook-ui fargate: \u0026#39;yes\u0026#39; spec: containers: - image: gcr.io/heptio-images/ks-guestbook-demo:0.1 name: guestbook-ui ports: - containerPort: 80 ### Service apiVersion: v1\tkind: Service\tmetadata:\tname: guestbook-ui namespace: app-dev annotations: service.beta.kubernetes.io/aws-load-balancer-type: external service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip spec: type: LoadBalancer\tports:\t- port: 80\ttargetPort: 80 protocol: TCP selector:\tapp: guestbook-ui Chạy command sau đây để tạo Deployment và Service:\ncd ./k8s\rkubectl apply -k ./base Để theo dõi cách mà Pod được chạy trên Fargate, sử dụng command sau, và xem phần Events:\nkubectl describe pod -n app-dev -l fargate=yes\rEvents:\rType Reason Age From Message\r---- ------ ---- ---- -------\rWarning LoggingDisabled 102s fargate-scheduler Disabled logging because aws-logging configmap was not found. configmap \u0026#34;aws-logging\u0026#34; not found\rNormal Scheduled 51s fargate-scheduler Successfully assigned app-dev/guestbook-ui-b595bd5d8-7hbjm to fargate-ip-192-168-118-178.ap-southeast-1.compute.internal\rNormal Pulling 51s kubelet Pulling image \u0026#34;gcr.io/heptio-images/ks-guestbook-demo:0.1\u0026#34;\rNormal Pulled 33s kubelet Successfully pulled image \u0026#34;gcr.io/heptio-images/ks-guestbook-demo:0.1\u0026#34; in 18.052091807s (18.052104843s including waiting)\rNormal Created 32s kubelet Created container guestbook-ui\rNormal Started 32s kubelet Started container guestbook-ui Lấy thông tin node Fargate được chạy bằng 2 command sau:\nNODE_NAME=$(kubectl get pod -n checkout -l app=guestbook-ui -o json | jq -r \u0026#39;.items[0].spec.nodeName\u0026#39;)\rkubectl describe node $NODE_NAME Dưới đây là mẫu thông tin của một Fargate Node: Lấy thông tin IP của Load Balancer:\nkubectl get svc -n app-dev\rNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\rguestbook-ui LoadBalancer 10.100.246.236 \u0026lt;YOUR_NLB_DNS\u0026gt; 80:32137/TCP 2m53s Truy cập vào địa chỉ DNS của Load Balancer trên browser để xem ứng dụng được chạy trên Fargate. Hooray! chúng ta đã deploy ứng dụng trong Fargate thành công.\n"
},
{
	"uri": "/3-eks-fargate/",
	"title": "EKS with Fargate mode",
	"tags": [],
	"description": "",
	"content": "Bắt đầu thôi Trong phần này chúng ta sẽ tiến hành tạo cluster với fargate mode, deploy một app đơn giản lên cluster và thực hiện scaling cho workload, phân bổ tài nguyên cho workload\nNội dung Khởi tạo cluster Deploy ứng dụng Phân bổ tài nguyên cho ứng dụng Scaling Workload "
},
{
	"uri": "/1-introduce/1.3-kubernetes-basic/",
	"title": "Kubernetes cơ bản",
	"tags": [],
	"description": "",
	"content": "Nội dung Trong phần này chúng ta sẽ tìm hiểu 2 thứ cơ bản của Kubernetes là:\nKiến trúc cơ bản của Kubernetes Các đối tượng cơ bản trong Kubernetes "
},
{
	"uri": "/3-eks-fargate/3.3-resource-allocation/",
	"title": "Phân bổ tài nguyên cho ứng dụng",
	"tags": [],
	"description": "",
	"content": "Fargate là một dịch vụ tuyệt vời, dịch vụ được tính tiền dựa trên CPU và memory giúp bạn tối ưu được tài nguyên sử dụng tránh lãng phí. Do đó khi sử dụng Fargate việc phân bổ tài nguyên CPU và memory hợp lý là điều hết sức cần thiết. Trước tiên chúng ta hãy kiểm tra tài nguyên được cấp cho Pod đã được deploy ở phần trước bằng command sau:\nkubectl get pod -n app-dev -l app=guestbook-ui -o json | jq -r \u0026#39;.items[0].metadata.annotations\u0026#39;\r{\r\u0026#34;CapacityProvisioned\u0026#34;: \u0026#34;0.25vCPU 0.5GB\u0026#34;,\r\u0026#34;Logging\u0026#34;: \u0026#34;LoggingDisabled: LOGGING_CONFIGMAP_NOT_FOUND\u0026#34;\r} Ở phần CapacityProvisioned hiển thị thông tin CPU và Memory của Pod. Đây là size tối thiểu của một Fargate Instance. Những nếu bạn cần một Fargate Instance mạnh mẽ hơn để chạy app của mình hoặc đơn giản là để cho việc chuẩn hóa tài nguyên cho từng Pod. Fargate cung cấp cho chúng ta option để việc này trở nên dễ dàng hơn. Dưới đây là file cấu hình cho việc phân bổ tài nguyên cho Pod\n# patch resource-allocation/guestbook-ui-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: guestbook-ui spec: template: spec: containers: - name: guestbook-ui resources: requests: cpu: \u0026#39;1\u0026#39; memory: 2.5G limits: memory: 2.5G Apply configure mới và chờ cho việc deploy thành công\nkubectl apply -k ./resource-allocation\rkubectl rollout status -n app-dev deployment guestbook-ui --timeout=2m Bây giờ kiểm tra lại tài nguyên được phân bổ cho Pod mới của chúng ta\nkubectl get pod -n app-dev -l app=guestbook-ui -o json | jq -r \u0026#39;.items[0].metadata.annotations\u0026#39;\r{\r\u0026#34;CapacityProvisioned\u0026#34;: \u0026#34;1vCPU 3GB\u0026#34;,\r\u0026#34;Logging\u0026#34;: \u0026#34;LoggingDisabled: LOGGING_CONFIGMAP_NOT_FOUND\u0026#34;\r} Oops! Memory chúng ta cấu hình là 2.5GB nhưng lại được cấp tới 3GB. Đây là một giá trị valid đối với một Fargate Instance.\nTham khảo thêm về các giá trị hợp lệ của Fargate Intance tại đây\n"
},
{
	"uri": "/4-cleanup-resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Chạy câu lệnh sau đây để xóa các Objects có trong cluster của chúng ta kubectl delete -k -R ./ Xóa cluster bằng câu lệnh sau đây eksctl delete cluster --name fargate-cluster Kiểm tra lại Stack được tạo ra trên CloudFormation và chờ cho việc xóa hoàn tất hoặc xóa bằng tay cluster đã tạo trên CloudFormation Xóa Stack đã tạo Cloud9 IDE Nhấn chọn Cloud9 Stack Nhấn Delete để tiến hành xóa Stack "
},
{
	"uri": "/3-eks-fargate/3.4-scaling-workload/",
	"title": "Scaling workload với Fargate",
	"tags": [],
	"description": "",
	"content": "Khi chạy cluster với Fargate bạn không cần phải lo lắng về việc mở rộng các worker node cho cluster của mình. Đây là ưu điểm tuyệt vời của Fargate Hãy thử mở rộng ứng dụng với configure sau và kiểm chứng\n# patch app/scaling-workload/guestbook-ui-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: guestbook-ui spec: replicas: 3 Apply kustomization mới và chờ việc deploy thành công\nkubectl apply -k ./scaling-workload\rkubectl rollout status -n app-dev deployment/guestbook-ui --timeout=2m Sau khi deploy hoàn thành, hãy cùng kiểm tra số lượng Pod đang chạy\nkubectl get pod -n app-dev -l app=guestbook-ui Mỗi Pod được chạy trên một Fargate instance riêng biệt. Hãy kiểm tra thông tin của các node cho từng Pod\nkubectl get pod -n app-dev -l app=guestbook-ui -o json | jq -r \u0026#39;.items[].spec.nodeName\u0026#39; Finish! Chúng ta đã hoàn thành các thao tác cơ bản của eks với fargate mode. Hãy tiếp tục với phần tiếp theo để tìm hiểu về cách sử dụng Fargate Profile để quản lý việc chạy Pod trên Fargate\nTham khảo thêm về Fargate Profile tại đây\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]